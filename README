********** Gambot IRC Bot **********

i.    Licensing
ii.   Setup
iii.  Directories and files
iv.   Hosting Gambot
v.    Developing plugins
vi.   Developing alternate processors
vii.  Developing Gambot
viii. Getting help

************************************

********** i. Licensing

This program's licensing information can be found in COPYING.
If COPYING is not present you may not have received this program
from an official source.

********** ii. Setup

Setting up Gambot is very simple. There are no prerequisites
besides perl 5.10 or later. Run Gambot.pl and it will ask you a 
few questions.

********** iii. Directories and files

In the root directory you should see Gambot.pl which is the main
script.

gamb_connect.pm, gamb_output.pm, and gamb_terminal.pm contain
also contain source code pertinent to the main script.

processors/example_processor.pl is an example processor script.
This will be kept up to date as we upgrade things. It serves as a
template for you to use for creating and upgrading your own bot
configurations.

processors/plugins/ contains all the default plugins. Plugin
files contain code for related commands. If you're developing your
own plugins, processors/plugins/version.pm serves as a good template.

********** iv. Hosting Gambot

Gambot requires at least 20MB of memory to run. 30MB or more is
recommended. It is a very fractured, and threaded program. Memory can
be saved by reducing the number of processing threads in Gambot.pl
and/or by forgoing the terminal thread.

The processor requirements should be minimal except during startup.

We recommend storing your logs in logs/bot_name_goes_here/

If you'd like to host more than one Gambot you can run Gambot.pl with
the name of a text file for an alternate configuration. For example:
'Gambot.pl foobar.txt'

********** v. Developing plugins

For developing plugins there are a few important variables:

a. $sender - The nick of the person that sent the message
b. $hostname - The hostname of the person that sent the messgae
c. $target - What channel the message was sent to. For private messages
this is automatically converted to $sender. This way you can always send
messages back to $target.
d. $message - The message itself.
e. $receiver - Sometimes users would like to redirect the bot's response
to another user in the same channel. $receiver will have that other user's
nick. It will default to $sender if no redirect was specified.

There are three basic jobs a command has to do.

1. Push its regex into @commands_regexes
2. Push a help string into @commands_helps
3. Push a subroutine containing the command's actual code into @commands_subs

They should be done in that order. See 
processors/plugins/temperature/temp-basic.pm for a good example of a
plugin that contains multiple commands.

Then make sure that your plugin is being loaded by the processor that your
bot is using.

********** vi. Developing alternate processors

Gambot processors needn't be written in perl. Any programming
language that can output plain text can be used. You can even use server 
side web langauges such as PHP or ColdFusion.

The processor is run with a system call. It receives two arguments: 
A raw IRC message that has been uri escaped (see Gambot.pl at around 
line 114) and the name of the bot.

You just need to accept these arguments and unescape the message before
processing.

Print your output just like you normally would, but separate individual
lines with the string " :nlsh: " (spaces included).

********** vii. Develping Gambot

The connection script itself is considered mostly complete at this time.
Suggestions and patches are welcome however.

********** viii. Getting help

Currently the best way to contact me is on the freenode.net IRC network.
Join ##Gambot and ask for Gambit.

The bug/suggestion tracker is at: https://github.com/grickit/Gambot/issues